import cucumber.runtime.Runtime;
import cucumber.runtime.io.MultiLoader;
import cucumber.runtime.io.ResourceLoaderClassFinder;
import org.apache.maven.plugin.MojoExecutionException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.junit.Test;
import com.github.temyers.options.ExtendedRuntimeOptions;
import java.io.*;
import java.util.*;


public class $className{

        private String outputPath="$outputPath";
        private String glue =$glue;

        @Test
        public void reRun()  {

                defaultRun();

                int count= $retryCount;

                System.out.println("Retry Count specified is :- "+count);

                switch (count){
                        case 1:
                               firstRun();
                               break;
                        case 2:
                               firstRun();
                               secondRun();
                               break;
                        case 3:
                               firstRun();
                               secondRun();
                               thirdRun();
                               break;
                        case 4:
                               firstRun();
                               secondRun();
                               thirdRun();
                               fourthRun();
                                break;
                        case 5:
                                firstRun();
                                secondRun();
                                thirdRun();
                                fourthRun();
                                fifthRun();
                                break;
                        default:
                                defaultRun() ;
                                break;
                }

        }

        private void defaultRun() {
                       List<String> arguments = new ArrayList<String>();
                       arguments.add("classpath:$featureFile");
                       arguments.add("--tags");
                       arguments.add($tags);
                       arguments.add("--plugin");
                       arguments.add($htmlFormat);
                       arguments.add("--plugin");
                       arguments.add($jsonFormat);
                       arguments.add("--plugin");
                       arguments.add($rerunFormat);
                       String[] gluepackages = glue.split(",");
                       for (String packages : gluepackages) {
                               if (!packages.contains("none")) {
                                       arguments.add("--glue");
                                       arguments.add(packages);
                               }
                       }
                       final String[] argv = arguments.toArray(new String[0]);
                       try {

                               executetests(argv);
                       } catch (InterruptedException e) {
                               e.printStackTrace();
                       } catch (IOException e) {
                               e.printStackTrace();
                       }
               }

        public void firstRun(){
        try{
                if(new File(outputPath+".rerun").exists() && new BufferedReader(new FileReader(outputPath + ".rerun")).readLine() != null) {
                        //ExecuteReRerun first arg: refactored input file ; second arg:- output json file path for getting result
                        ExecuteReRerun("@"+outputPath+".rerun",outputPath+"/cucumber1.json",outputPath+"/rerun1.rerun");
                }
           }catch(Exception e){e.printStackTrace();}
        }
        public void secondRun(){
        try{
                if(new File(outputPath+"/rerun1.rerun").exists()&& new BufferedReader(new FileReader(outputPath+"/rerun1.rerun")).readLine() != null) {
                        //ExecuteReRerun first arg: refactored input file ; second arg:- output json file path for getting result
                        ExecuteReRerun("@"+outputPath+"/rerun1.rerun",outputPath+"/cucumber1.json",outputPath+"/rerun2.rerun");
                }
            }catch(Exception e){e.printStackTrace();}
        }
        public void thirdRun(){
        try{
             if(new File(outputPath+"/rerun2.rerun").exists() && new BufferedReader(new FileReader(outputPath+"/rerun2.rerun")).readLine() != null) {
                        //ExecuteReRerun first arg: refactored input file ; second arg:- output json file path for getting result
                        ExecuteReRerun("@"+outputPath+"/rerun2.rerun",outputPath+"/cucumber3.json",outputPath+"/rerun3.rerun");
                }
             }catch(Exception e){e.printStackTrace();}
        }
        public void fourthRun(){
               try{
                if(new File(outputPath+"/rerun3.rerun").exists()&& new BufferedReader(new FileReader(outputPath+"/rerun3.rerun")).readLine() != null) {
                       //ExecuteReRerun first arg: refactored input file ; second arg:- output json file path for getting result
                       ExecuteReRerun("@"+outputPath+"/rerun3.rerun",outputPath+"/cucumber4.json",outputPath+"/rerun4.rerun");
               }
                }catch(Exception e){e.printStackTrace();}
        }

        public void fifthRun(){
           try{
                if(new File(outputPath+"/rerun4.rerun").exists() && new BufferedReader(new FileReader(outputPath+"/rerun4.rerun")).readLine() != null) {
                      //ExecuteReRerun first arg: refactored input file ; second arg:- output json file path for getting result
                  ExecuteReRerun("@"+outputPath+"/rerun4.rerun",outputPath+"/cucumber5.json",outputPath+"/rerun5.rerun");
                }
              }catch(Exception e){e.printStackTrace();}
        }

        public void ExecuteReRerun(String rerunFile,String targetJson,String targetRerun) {
                List<String> arguments = new ArrayList<String>();
                arguments.add(rerunFile);
                arguments.add("--plugin");
                arguments.add("pretty:"+outputPath+"/cucumber-pretty.txt");
                arguments.add("--plugin");
                arguments.add("json:"+targetJson);
                arguments.add("--plugin");
                arguments.add("rerun:"+targetRerun);
                String[] gluepackages = glue.split(",");
                for (String packages : gluepackages) {
                        if (!packages.contains("none")) {
                                arguments.add("--glue");
                                arguments.add(packages);
                        }
                }
                final String[] argv = arguments.toArray(new String[0]);
                try {
                        executetests(argv);
                } catch (InterruptedException e) {
                        e.printStackTrace();
                } catch (IOException e) {
                        e.printStackTrace();
                }
        }


        public byte executetests(final String[] argv) throws InterruptedException, IOException {

                ExtendedRuntimeOptions runtimeOptions = new ExtendedRuntimeOptions(new ArrayList(Arrays.asList(argv)));
                MultiLoader resourceLoader = new MultiLoader(this.getClass().getClassLoader());
                ResourceLoaderClassFinder classFinder = new ResourceLoaderClassFinder(resourceLoader, this.getClass().getClassLoader());
                Runtime runtime = new Runtime(resourceLoader, classFinder, this.getClass().getClassLoader(), runtimeOptions);
                runtime.run();
                System.out.println(runtime.exitStatus());
                return runtime.exitStatus();

        }
}
